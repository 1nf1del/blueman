#!/usr/bin/python

# Copyright (C) 2008 Valmantas Paliksa <walmis at balticum-tv dot lt>
# Copyright (C) 2008 Tadas Dailyda <tadas at dailyda dot com>
#
# Licensed under the GNU General Public License Version 3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

 
import sys

sys.path = ["../common/"] + sys.path

import gtk

from blueman.constants import *
from blueman.Gui.manager.manager_device_list import manager_device_list
from blueman.Gui.manager.manager_toolbar import manager_toolbar
from blueman.Gui.manager.manager_menu import manager_menu
from blueman.Gui.manager.manager_stats import manager_stats





class blueman:

	def __init__(self):
		#set icon path
		ic = gtk.icon_theme_get_default()
		ic.prepend_search_path(ICON_PATH)
		ic.prepend_search_path(ICON_PATH + "/devices")
		ic.prepend_search_path(ICON_PATH + "/signal")
		
		self.Builder = gtk.Builder()
		self.Builder.add_from_file(UI_PATH +"/manager-main.ui")

		window = self.Builder.get_object("window")
		sw = self.Builder.get_object("scrollview")
		
		self.List = manager_device_list()
		self.List.show()
		sw.add(self.List)
		
		#if self.List.IsValidAdapter():
		#	self.List.DisplayKnownDevices()
		
		
		self.Toolbar = manager_toolbar(self)
		self.Menu = manager_menu(self)
		self.Stats = manager_stats(self)
		
		self.List.connect("adapter-changed", self.on_adapter_changed)
		
		
		window.show()
		gtk.main()
		
		
	def on_adapter_changed(self, list, adapter):
		if adapter != None:
			self.List.DisplayKnownDevices()
		
	def add_device(self, device):
		pass
		
			
	def remove_device(self, device):
		pass
		
	def inquiry(self):
		pass
		
	def setup(self, device):
		pass
		
	def bond(self, device):
		pass
		
	def toggle_trust(self, device):
		pass

		



blueman()
