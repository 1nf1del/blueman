#!/usr/bin/python

# Copyright (C) 2008 Valmantas Paliksa <walmis at balticum-tv dot lt>
# Copyright (C) 2008 Tadas Dailyda <tadas at dailyda dot com>
#
# Licensed under the GNU General Public License Version 3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 


import os.path
import sys
import gtk
import dbus

#support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if os.path.exists(os.path.join(_dirname,"ChangeLog")):
	sys.path.insert(0, _dirname)

from blueman.Constants import *
from blueman.Functions import *
from blueman.gui.manager.ManagerDeviceList import ManagerDeviceList
from blueman.gui.manager.ManagerToolbar import ManagerToolbar
from blueman.gui.manager.ManagerMenu import ManagerMenu
from blueman.gui.manager.ManagerStats import ManagerStats
from blueman.gui.manager.ManagerProgressbar import ManagerProgressbar

from subprocess import call

import gettext
_ = gettext.gettext

class Blueman:

	def __init__(self):
		setup_icon_path()
		
		self.Builder = gtk.Builder()
		self.Builder.add_from_file(UI_PATH +"/manager-main.ui")

		window = self.Builder.get_object("window")
		window.connect("delete-event", lambda w,x : gtk.main_quit())
		window.props.icon_name = "blueman"
		sw = self.Builder.get_object("scrollview")
		
		self.List = ManagerDeviceList(inst=self)

		self.List.show()
		sw.add(self.List)
		
		#if self.List.IsValidAdapter():
		#	self.List.DisplayKnownDevices()
		
		
		self.Toolbar = ManagerToolbar(self)
		self.Menu = ManagerMenu(self)
		self.Stats = ManagerStats(self)
		
		self.List.DisplayKnownDevices(autoselect=True)
		
		self.List.connect("adapter-changed", self.on_adapter_changed)
		
		
		window.show()
		gtk.main()
		
		
	def on_adapter_changed(self, list, adapter):
		if adapter != None:
			self.List.DisplayKnownDevices(autoselect=True)
		
	def add_device(self, device):
		def ok(*args):
			print args
			prog.finalize()
		
		def err(*args):
			prog.finalize()
		
		address = device.GetProperties()["Address"]
		adapter = self.List.Adapter
		
		prog = ManagerProgressbar(self, text=_("Adding"))
		prog.start()
		adapter.CreateDevice(address, reply_handler=ok, error_handler=err)
		
	def inquiry(self):
		def prop_changed(List, adapter, kv):	
			(key, value) = kv
			if key == "Discovering" and not value:
				prog.finalize()
				
		prog = ManagerProgressbar(self, text=_("Searching"))
		prog.connect("cancelled", lambda x: self.List.StopDiscovery())
		self.List.DiscoverDevices()
		self.List.connect("discovery-progress", lambda x,y: prog.fraction(y))
		self.List.connect("adapter-property-changed", prop_changed)
		
	def setup(self, device):
		pass
		
	def bond(self, device):
		name = adapter_path_to_name(self.List.Adapter.GetObjectPath())

		self.List.Adapter.CreatePairedDevice(device.Address, dbus.ObjectPath("/org/blueman/agent/"+name), "DisplayYesNo")
		
	def toggle_trust(self, device):
		props = device.GetProperties()
		device.Trusted = not device.Trusted
		
	def send(self, device, File=None):
		pass
		
	def remove(self, device):
		self.List.Adapter.RemoveDevice(device.Device)
		
		
	def browse(self, device):
		call(["nautilus", "--browser", "obex://[%s]" % device.Address])
		
	def disconnect(self, device):
		device.Disconnect()

		



Blueman()
