#!/usr/bin/python

# Copyright (C) 2008 Valmantas Paliksa <walmis at balticum-tv dot lt>
# Copyright (C) 2008 Tadas Dailyda <tadas at dailyda dot com>
#
# Licensed under the GNU General Public License Version 3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

import sys
from subprocess import *
import os.path
import pynotify
import dbus
import dbus.glib
import gobject
import gtk

#support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if os.path.exists(os.path.join(_dirname,"ChangeLog")):
	sys.path.insert(0, _dirname)

from blueman.main.SignalTracker import SignalTracker
from blueman.Functions import *
from blueman.main.applet.DbusService import DbusService
from blueman.Constants import *
import blueman.bluez as Bluez
from blueman.gui.CommonUi import show_about_dialog
import gettext
_ = gettext.gettext


class BluemanApplet:

	def __init__(self):
		setup_icon_path()
		if not pynotify.init("Blueman"):
			print 'Error: Failed to init pynotify'
		
		self.status_icon = gtk.StatusIcon()
		self.status_icon = gtk.status_icon_new_from_icon_name("bluetooth")
		self.status_icon.connect('popup-menu', self.on_popup_menu)
		self.build_popup_menu()
		
		#determine if icon should be visible (in case adapters are present)
		self.bus = dbus.SystemBus()
		self.bus.watch_name_owner('org.bluez', self.on_dbus_name_owner_change)
		self.manager_init()
		
		self.signals = SignalTracker()
		
		DbusService(self)
		
		gtk.main()
		
	def manager_init(self):
		try:
			self.signals.DisconnectAll()
			self.Manager = Bluez.Manager('gobject')
			self.signals.Handle("bluez", self.Manager, self.on_adapter_removed, 'AdapterRemoved')
			self.signals.Handle("bluez", self.Manager, self.on_adapter_added, 'AdapterAdded')
			self.status_icon.set_visible(self.Manager.ListAdapters() != [])
		except:
			self.Manager = None
			self.status_icon.set_visible(False)
			print 'Bluez DBus API not available. Listening for DBus name ownership changes'
		
	def on_dbus_name_owner_change(self, owner):
		print 'org.bluez owner changed to ', owner
		if owner == '':
			self.Manager = None
			self.status_icon.set_visible(False)
		elif self.Manager == None:
			self.manager_init()
		
	def on_adapter_added(self, path):
		print 'Adapter added ', path
		self.status_icon.set_visible(True)
		
	def on_adapter_removed(self, path):
		print 'Adapter removed ', path
		if self.Manager.ListAdapters() == []:
			self.status_icon.set_visible(False)
			
	def build_popup_menu(self):
		menu_items = []
		menu_items += [gtk.MenuItem(_('Setup new device')+'...', False)]
		menu_items[-1].connect('activate', self.on_setup_new)
		menu_items += [gtk.MenuItem(_('Send files to device')+'...', False)]
		menu_items[-1].connect('activate', self.on_send)
		if OBEX_BROWSE_AVAILABLE:
			menu_items += [gtk.MenuItem(_('Browse files on device')+'...', False)]
			menu_items[-1].connect('activate', self.on_browse)
		menu_items += [gtk.SeparatorMenuItem()]
		menu_items += [gtk.MenuItem(_('Devices')+'...', False)]
		menu_items[-1].connect('activate', self.on_devices)
		menu_items += [gtk.MenuItem(_('Adapters')+'...', False)]
		menu_items[-1].connect('activate', self.on_adapters)
		menu_items += [gtk.MenuItem(_('Local services')+'...', False)]
		menu_items[-1].connect('activate', self.on_local_services)
		menu_items += [gtk.SeparatorMenuItem()]
		menu_items += [gtk.ImageMenuItem(gtk.STOCK_ABOUT)]
		menu_items[-1].connect('activate', self.on_about)
		
		self.menu = gtk.Menu()
		for menu_item in menu_items:
			self.menu.append(menu_item)
			menu_item.show()
			
	def on_popup_menu(self, status_icon, button, activate_time):
		self.menu.popup(None, None, gtk.status_icon_position_menu,
						button, activate_time, status_icon)
	
	def on_setup_new(self, menu_item):
		self.spawn('blueman-wizard')
		
	def on_send(self, menu_item):
		self.spawn('blueman-sendto')
		
	def on_browse(self, menu_item):
		self.spawn('blueman-browse')
		
	def on_devices(self, menu_item):
		self.spawn('blueman-manager')
		
	def on_adapters(self, menu_item):
		self.spawn('blueman-adapters')
		
	def on_local_services(self, menu_item):
		pass
		
	def on_about(self, menu_item):
		show_about_dialog('Blueman '+_('applet'))
		
	def show_notification(self, summary, message, timeout=-1, action=None, action_cb=None):
		n = pynotify.Notification(summary, message)
		if action:
			n.add_action("button", action, action_cb)
		if timeout != -1:
			n.set_timeout(timeout)
		if self.status_icon.get_visible():
			screen, area, orientation = self.status_icon.get_geometry()
			n.set_hint("x", area.x + area.width/2)
			n.set_hint("y", area.y + area.height)
		n.show()

BluemanApplet()

