#!/usr/bin/python

import os
import sys
#support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if os.path.exists(os.path.join(_dirname,"ChangeLog")):
	sys.path.insert(0, _dirname)

import gtk
import blueman.bluez as Bluez
from blueman.gui.GenericList import GenericList
from blueman.bluez.ServiceInterface import ServiceInterface
from blueman.main.Config import Config

from blueman.Functions import *
from blueman.Constants import *
class BluemanServices:


	def __init__(self):
		self.Manager = Bluez.Manager('gobject')
		adapter = self.Manager.GetAdapter()
		
		self.Builder = gtk.Builder()
		self.Builder.add_from_file(UI_PATH +"/services.ui")
		
		data = [
			["picture", 'GdkPixbuf', gtk.CellRendererPixbuf(), {"pixbuf":0}, None],
			["caption", str, gtk.CellRendererText(), {"markup":1}, None, {"expand": True}],
			["id", str],
		]
		
		ls = GenericList(data)
		ls.props.headers_visible = False
		ls.append(picture=get_icon("gtk-network", 32), caption="Network", id="network")
		ls.append(picture=get_icon("gtk-open", 32), caption="Transfer", id="transfer")
		ls.selection.connect("changed", self.on_selection_changed)
		self.List = ls

				
		self.Builder.get_object("viewport1").add(ls)
		ls.show()
		
		self.Dialog = self.Builder.get_object("dialog")
		self.Dialog.show()
		
		#s = ServiceInterface("org.bluez.NetworkRouter", adapter.GetObjectPath(), ["GetProperties"])
		#print "router properties", s.GetProperties()
		
		#s = ServiceInterface("org.bluez.NetworkHub", adapter.GetObjectPath(), ["GetProperties"])
		#print "hub properties",s.GetProperties()
		
		#s = ServiceInterface("org.bluez.NetworkPeer", adapter.GetObjectPath(), ["GetProperties"])
		#print "peer properties",s.GetProperties()
		self.TransConf = Config("transfer")
		self.TransConf.connect("property-changed", self.on_property_changed)
		
		self.Signals = {}
		
		self.page = "network"
		
		
		gtk.main()
		
	def on_property_changed(self, config, key, value):
		if config == self.TransConf:
			if key == "opp_enabled":
				self.Builder.get_object(key).props.active = value
			if key == "ftp_enabled":
				self.Builder.get_object(key).props.active = value
			if key == "ftp_allow_write":
				self.Builder.get_object(key).props.active = value
		
	def set_page(self, pageid):
		self.Builder.get_object(self.page).props.visible = False
		self.Builder.get_object(pageid).props.visible = True
		self.page = pageid
		
		if pageid == "transfer":
			self.setup_transfer()
			
			
	def on_toggled(self, checkbutton, name):
		if self.page == "transfer":
			setattr(self.TransConf.props, name, checkbutton.props.active)
			
	def setup_transfer(self):
		opp_enabled = self.Builder.get_object("opp_enabled")
		ftp_enabled = self.Builder.get_object("ftp_enabled")
		ftp_allow_write = self.Builder.get_object("ftp_allow_write")
		opp_accept = self.Builder.get_object("opp_accept")
		
		opp_enabled.props.active = self.TransConf.props.opp_enabled
		ftp_enabled.props.active = self.TransConf.props.ftp_enabled
		ftp_allow_write.props.active = self.TransConf.props.ftp_allow_write
		opp_accept.props.active = self.TransConf.props.opp_accept
		
		if self.TransConf.props.shared_path != None:
			self.Builder.get_object("shared_path").set_current_folder(self.TransConf.props.shared_path)
			
		opp_enabled.connect("toggled", self.on_toggled, "opp_enabled")
		ftp_enabled.connect("toggled", self.on_toggled, "ftp_enabled")
		ftp_allow_write.connect("toggled", self.on_toggled, "ftp_allow_write")
		opp_accept.connect("toggled", self.on_toggled, "opp_accept")
		

	
	def on_selection_changed(self, selection):
		iter = self.List.selected()
		row = self.List.get(iter, "id")
		id = row["id"]
		
		self.set_page(id)
		
BluemanServices()
